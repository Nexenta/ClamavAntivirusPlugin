#!/usr/bin/perl -w
#
# Copyright (C) 2005-2011 Nexenta Systems, Inc.
# All rights reserved.
#

#
# use
#
use File::Basename;

use NZA::Common;
use strict;

#
# tunables
#
my ( $recursive, $erase, $quarantine, $email );

#
# Unique per-trigger fault IDs
#
my $FAULT_ID_VIRUS = 1;

#
# vars
#
my $pathname;
my $CLAMAV_RUNNER_TYPE = 'clamav-scan';

##################################################
#
##################################################

#
# USAGE
#
unless (scalar @ARGV) {
	print <<EOF;
Usage: $0 pathname

   pathname  	- actual path of the directory for virus scanning

EOF
	exit 1;
}

($pathname) = @ARGV;
#nms_runner_trace("@ARGV\n");

#
# runner init
#
my $rc = nms_runner_init($pathname,
			 flags => $NZA::RFLAG_USE_INIT_PARAMS,
			 tunables    => {
			 	recursive => \$recursive,
			 	recursive_shortdesc => "0 | 1. Scan subdirectories recursively.",
				# recursive_longdesc => "Scan subdirectories recursively.",
			 	erase => \$erase,
			 	erase_shortdesc => "0 | 1. Erase infected files. Be careful!",
				# erase_longdesc => "Erase infected files. Be careful!",
			 	quarantine => \$quarantine,
			 	quarantine_shortdesc => "Move infected files into quarantine directory.",
				# quarantine_longdesc => "Move infected files into quarantine directory.",
				email => \$email,
				email_shortdesc => "0 | 1. If true (non-zero), generate email notification about found viruses",
				# email_longdesc => "0 | 1. If true (non-zero), generate email notification about found viruses",
			 });


exit 1 if ($rc != 0);

my $props = {
	recursive	=> ( $recursive ),
	erase		=> ( $erase ),
	email		=> ( $email ),
	quarantine	=> ( $quarantine =~ /^\s*$/ ) ? '' : $quarantine,
	async		=> '1',
};

eval {
	# nms_runner_trace("ClamAV: plugin call to clamscan & ${pathname}");
	my $lines = &NZA::plugin('nms-clamav-antivirus')->clamscan(
			'',
			$pathname,
			$props
			);

	# my @viruses = ();
	# foreach my $line ( @$lines ) {
		# nms_runner_trace($NZA::TRACE_LEVEL_VVV, "$line");
		# push @viruses, $1 if $line =~ /^(.+)\s+FOUND$/;
	# }
	# foreach my $line ( @viruses ) {
		# nms_runner_trace("$line");
	# }
	# _send_email( \@viruses ) if ( scalar @viruses ) and ( $email );

	# XXX: isa(NZA::Trigger)
	# if (scalar @viruses) {
		# my %fault = (id => $FAULT_ID_VIRUS,
			     # level => $NZA::TRIGGER_ALARM,
			     # max_fail => 1,
			     # severity => $NZA::SEVERITY_NOTICE,
			     # description => join( "\n", @viruses ));
		# eval {
			# &NZA::trigger->fault($pathname, \%fault);
		# }; if (nms_catch($@)) {
			# nms_runner_trace("FATAL: failed to report a fault: $@");
		# }
	# }

}; if (nms_catch($@)) {
	nms_runner_trace("FAILURE: $@");
	#TODO: and stop service, and report fault?
	#change state of runner?
}

#
# terminate
#

nms_runner_term($pathname);

# SUCCESS
exit 0;

####################################################
# send email
####################################################

sub _send_email {
	my %report = ();
	my $lines = shift;
	$report{shortname}   = "Viruses are found by $CLAMAV_RUNNER_TYPE '$pathname'";
	$report{description} = join( "\n", @$lines );

	# my $att = $OUTFILE;
	# my $base = basename($OUTFILE);
	# unless ($OUTFILE =~ /\.gz$/) {
		# $att = "/tmp/$base.gz";
		# my @lines = ();
		# if (sysexec("cat $OUTFILE | gzip > $att", \@lines) != 0) {
			# nms_runner_trace("failed to gzip $OUTFILE: @lines");
			# return;
		# }
	# }
	# $report{"attachment-$base.gz"} = $att;

	&NZA::reporter->send($pathname, \%report);
}

